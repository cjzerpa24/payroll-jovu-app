/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Payroll as PrismaPayroll,
  Payslip as PrismaPayslip,
  Employee as PrismaEmployee,
} from "@prisma/client";

export class PayrollServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PayrollCountArgs, "select">): Promise<number> {
    return this.prisma.payroll.count(args);
  }

  async payrolls<T extends Prisma.PayrollFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayrollFindManyArgs>
  ): Promise<PrismaPayroll[]> {
    return this.prisma.payroll.findMany<Prisma.PayrollFindManyArgs>(args);
  }
  async payroll<T extends Prisma.PayrollFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayrollFindUniqueArgs>
  ): Promise<PrismaPayroll | null> {
    return this.prisma.payroll.findUnique(args);
  }
  async createPayroll<T extends Prisma.PayrollCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayrollCreateArgs>
  ): Promise<PrismaPayroll> {
    return this.prisma.payroll.create<T>(args);
  }
  async updatePayroll<T extends Prisma.PayrollUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayrollUpdateArgs>
  ): Promise<PrismaPayroll> {
    return this.prisma.payroll.update<T>(args);
  }
  async deletePayroll<T extends Prisma.PayrollDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PayrollDeleteArgs>
  ): Promise<PrismaPayroll> {
    return this.prisma.payroll.delete(args);
  }

  async findPayslips(
    parentId: string,
    args: Prisma.PayslipFindManyArgs
  ): Promise<PrismaPayslip[]> {
    return this.prisma.payroll
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .payslips(args);
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.payroll
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }
}
