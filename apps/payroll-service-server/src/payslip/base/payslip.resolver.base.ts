/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Payslip } from "./Payslip";
import { PayslipCountArgs } from "./PayslipCountArgs";
import { PayslipFindManyArgs } from "./PayslipFindManyArgs";
import { PayslipFindUniqueArgs } from "./PayslipFindUniqueArgs";
import { CreatePayslipArgs } from "./CreatePayslipArgs";
import { UpdatePayslipArgs } from "./UpdatePayslipArgs";
import { DeletePayslipArgs } from "./DeletePayslipArgs";
import { Payroll } from "../../payroll/base/Payroll";
import { Salary } from "../../salary/base/Salary";
import { PayslipService } from "../payslip.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Payslip)
export class PayslipResolverBase {
  constructor(
    protected readonly service: PayslipService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "read",
    possession: "any",
  })
  async _payslipsMeta(
    @graphql.Args() args: PayslipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Payslip])
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "read",
    possession: "any",
  })
  async payslips(
    @graphql.Args() args: PayslipFindManyArgs
  ): Promise<Payslip[]> {
    return this.service.payslips(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Payslip, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "read",
    possession: "own",
  })
  async payslip(
    @graphql.Args() args: PayslipFindUniqueArgs
  ): Promise<Payslip | null> {
    const result = await this.service.payslip(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Payslip)
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "create",
    possession: "any",
  })
  async createPayslip(
    @graphql.Args() args: CreatePayslipArgs
  ): Promise<Payslip> {
    return await this.service.createPayslip({
      ...args,
      data: {
        ...args.data,

        payroll: args.data.payroll
          ? {
              connect: args.data.payroll,
            }
          : undefined,

        salary: args.data.salary
          ? {
              connect: args.data.salary,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Payslip)
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "update",
    possession: "any",
  })
  async updatePayslip(
    @graphql.Args() args: UpdatePayslipArgs
  ): Promise<Payslip | null> {
    try {
      return await this.service.updatePayslip({
        ...args,
        data: {
          ...args.data,

          payroll: args.data.payroll
            ? {
                connect: args.data.payroll,
              }
            : undefined,

          salary: args.data.salary
            ? {
                connect: args.data.salary,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Payslip)
  @nestAccessControl.UseRoles({
    resource: "Payslip",
    action: "delete",
    possession: "any",
  })
  async deletePayslip(
    @graphql.Args() args: DeletePayslipArgs
  ): Promise<Payslip | null> {
    try {
      return await this.service.deletePayslip(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Payroll, {
    nullable: true,
    name: "payroll",
  })
  @nestAccessControl.UseRoles({
    resource: "Payroll",
    action: "read",
    possession: "any",
  })
  async getPayroll(@graphql.Parent() parent: Payslip): Promise<Payroll | null> {
    const result = await this.service.getPayroll(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Salary, {
    nullable: true,
    name: "salary",
  })
  @nestAccessControl.UseRoles({
    resource: "Salary",
    action: "read",
    possession: "any",
  })
  async getSalary(@graphql.Parent() parent: Payslip): Promise<Salary | null> {
    const result = await this.service.getSalary(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
